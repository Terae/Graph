#########################
# project configuration #
#########################

language: cpp
dist: focal
sudo: required

################
# build matrix #
################

matrix:
  include:

    # Valgrind
    - os: linux
      compiler: gcc
      env:
        - COMPILER=g++-9
        - CMAKE_OPTIONS=-DGRAPH_Valgrind=ON
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-9', 'valgrind']

    # cppcheck
    - os: linux
      compiler: gcc
      env:
        - COMPILER=g++-10
        - SPECIAL=cppcheck
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-10', 'cppcheck']
      after_success:
        - make cppcheck

    # Codecov + Coveralls (http://gronlier.fr/blog/2015/01/adding-code-coverage-to-your-c-project/)
    - os: linux
      compiler: gcc
      env:
        - COMPILER=g++-9
        - CMAKE_OPTIONS=-DGRAPH_Coverage=ON
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-9', 'lcov']
      before_script:
        - pip install --user cpp-coveralls
      after_success:
        - bash <(curl -s https://codecov.io/bash)
        - coveralls --build-root test --include src --gcov 'gcov-9' --gcov-options '\\-lp'

    # Benchmarks with C++23
    - os: linux
      compiler: gcc
      env:
        - COMPILER=g++-11
        - CMAKE_OPTIONS=-DENABLE_BENCHMARKING=ON -DENABLE_TESTING=OFF -DENABLE_EXAMPLES=OFF
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-11']

    # C++20 support test
    - os: linux
      compiler: gcc
      env:
        - COMPILER=g++-10
        - CMAKE_OPTIONS=-DCMAKE_CXX_STANDARD=20
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-10']

    # C++23 support test
    - os: linux
      compiler: gcc
      env:
        - COMPILER=g++-11
        - CMAKE_OPTIONS=-DCMAKE_CXX_STANDARD=23
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-11']

    ###############
    # Linux / GCC #
    ###############

    - os: linux
      compiler: gcc
      env: COMPILER=g++-9
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-9']

    - os: linux
      compiler: gcc
      env: COMPILER=g++-10
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-10']

    - os: linux
      compiler: gcc
      env: COMPILER=g++-11
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-11']


    #################
    # Linux / Clang #
    #################

    # Debug mode
    #- os: linux
    #  compiler: clang
    #  env: LLVM_VERSION=default

    - os: linux
      compiler: clang
      env: COMPILER=clang++-10
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-focal-10']
          packages: ['g++-10', 'clang-10']

    - os: linux
      compiler: clang
      env: COMPILER=clang++-11
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-focal-11']
          packages: ['g++-10', 'clang-11']

    - os: linux
      compiler: clang
      env: COMPILER=clang++-12
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-focal-12']
          packages: ['g++-10', 'clang-12']

install:
  ###################################################################
  # All the dependencies are installed in ${TRAVIS_BUILD_DIR}/deps/ #
  ###################################################################
  - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
  - mkdir -p ${DEPS_DIR} && cd ${DEPS_DIR}

  ###############################
  # Override compiler if needed #
  ###############################
  - if [[ "${COMPILER}" != "" ]]; then export CXX=${COMPILER}; fi

  ##########################
  # Install a recent CMake #
  ##########################
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      CMAKE_URL="https://github.com/Kitware/CMake/releases/download/v3.20.0/cmake-3.20.0-linux-x86_64.tar.gz"
      mkdir cmake && travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake
      export PATH=${DEPS_DIR}/cmake/bin:${PATH}
    elif [[ "${TRAVIS_OS_NAME}" == "osx" ]]; then
      brew update
      which cmake || brew install cmake
    fi

################
# build script #
################

script:
  # shox OS/compiler version
  - uname -a
  - $CXX --version

  - cd ${TRAVIS_BUILD_DIR}
  - cmake -H. -Bbuild ${CMAKE_OPTIONS}
  #- cmake -H. -Bbuild -DCMAKE_BUILD_TYPE='Release' ${CMAKE_OPTIONS}
  - cd build

  # compile and run
  #- make -j 4
  - cmake --build . --config Release
  - ctest --output-on-failure -C Release -j 4
